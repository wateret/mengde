// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_
#define FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_

#include "flatbuffers/flatbuffers.h"

namespace mengde {
namespace save {

struct Scenario;

struct ResourceManagers;

struct TerrainManager;

struct HeroClassManager;

struct TerrainRecord;

struct Terrain;

struct HeroClass;

struct BaseIncr;

struct PromotionInfo;

struct Attribute;

struct Position;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BaseIncr FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t base_;
  int32_t incr_;

 public:
  BaseIncr() {
    memset(this, 0, sizeof(BaseIncr));
  }
  BaseIncr(int32_t _base, int32_t _incr)
      : base_(flatbuffers::EndianScalar(_base)),
        incr_(flatbuffers::EndianScalar(_incr)) {
  }
  int32_t base() const {
    return flatbuffers::EndianScalar(base_);
  }
  int32_t incr() const {
    return flatbuffers::EndianScalar(incr_);
  }
};
FLATBUFFERS_STRUCT_END(BaseIncr, 8);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Attribute FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t atk_;
  int32_t def_;
  int32_t dex_;
  int32_t itl_;
  int32_t mor_;

 public:
  Attribute() {
    memset(this, 0, sizeof(Attribute));
  }
  Attribute(int32_t _atk, int32_t _def, int32_t _dex, int32_t _itl, int32_t _mor)
      : atk_(flatbuffers::EndianScalar(_atk)),
        def_(flatbuffers::EndianScalar(_def)),
        dex_(flatbuffers::EndianScalar(_dex)),
        itl_(flatbuffers::EndianScalar(_itl)),
        mor_(flatbuffers::EndianScalar(_mor)) {
  }
  int32_t atk() const {
    return flatbuffers::EndianScalar(atk_);
  }
  int32_t def() const {
    return flatbuffers::EndianScalar(def_);
  }
  int32_t dex() const {
    return flatbuffers::EndianScalar(dex_);
  }
  int32_t itl() const {
    return flatbuffers::EndianScalar(itl_);
  }
  int32_t mor() const {
    return flatbuffers::EndianScalar(mor_);
  }
};
FLATBUFFERS_STRUCT_END(Attribute, 20);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Position FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Position() {
    memset(this, 0, sizeof(Position));
  }
  Position(int32_t _x, int32_t _y)
      : x_(flatbuffers::EndianScalar(_x)),
        y_(flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Position, 8);

struct Scenario FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_STAGE_ID_LIST = 6,
    VT_STAGE_NO = 8,
    VT_RESOURCE_MANAGERS = 10
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *stage_id_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_STAGE_ID_LIST);
  }
  uint32_t stage_no() const {
    return GetField<uint32_t>(VT_STAGE_NO, 0);
  }
  const ResourceManagers *resource_managers() const {
    return GetPointer<const ResourceManagers *>(VT_RESOURCE_MANAGERS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_STAGE_ID_LIST) &&
           verifier.VerifyVector(stage_id_list()) &&
           verifier.VerifyVectorOfStrings(stage_id_list()) &&
           VerifyField<uint32_t>(verifier, VT_STAGE_NO) &&
           VerifyOffset(verifier, VT_RESOURCE_MANAGERS) &&
           verifier.VerifyTable(resource_managers()) &&
           verifier.EndTable();
  }
};

struct ScenarioBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Scenario::VT_ID, id);
  }
  void add_stage_id_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stage_id_list) {
    fbb_.AddOffset(Scenario::VT_STAGE_ID_LIST, stage_id_list);
  }
  void add_stage_no(uint32_t stage_no) {
    fbb_.AddElement<uint32_t>(Scenario::VT_STAGE_NO, stage_no, 0);
  }
  void add_resource_managers(flatbuffers::Offset<ResourceManagers> resource_managers) {
    fbb_.AddOffset(Scenario::VT_RESOURCE_MANAGERS, resource_managers);
  }
  explicit ScenarioBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScenarioBuilder &operator=(const ScenarioBuilder &);
  flatbuffers::Offset<Scenario> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Scenario>(end);
    return o;
  }
};

inline flatbuffers::Offset<Scenario> CreateScenario(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> stage_id_list = 0,
    uint32_t stage_no = 0,
    flatbuffers::Offset<ResourceManagers> resource_managers = 0) {
  ScenarioBuilder builder_(_fbb);
  builder_.add_resource_managers(resource_managers);
  builder_.add_stage_no(stage_no);
  builder_.add_stage_id_list(stage_id_list);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Scenario> CreateScenarioDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *stage_id_list = nullptr,
    uint32_t stage_no = 0,
    flatbuffers::Offset<ResourceManagers> resource_managers = 0) {
  return mengde::save::CreateScenario(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      stage_id_list ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*stage_id_list) : 0,
      stage_no,
      resource_managers);
}

struct ResourceManagers FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TERRAIN_MANAGER = 4,
    VT_HERO_CLASS_MANAGER = 6
  };
  const TerrainManager *terrain_manager() const {
    return GetPointer<const TerrainManager *>(VT_TERRAIN_MANAGER);
  }
  const HeroClassManager *hero_class_manager() const {
    return GetPointer<const HeroClassManager *>(VT_HERO_CLASS_MANAGER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TERRAIN_MANAGER) &&
           verifier.VerifyTable(terrain_manager()) &&
           VerifyOffset(verifier, VT_HERO_CLASS_MANAGER) &&
           verifier.VerifyTable(hero_class_manager()) &&
           verifier.EndTable();
  }
};

struct ResourceManagersBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_terrain_manager(flatbuffers::Offset<TerrainManager> terrain_manager) {
    fbb_.AddOffset(ResourceManagers::VT_TERRAIN_MANAGER, terrain_manager);
  }
  void add_hero_class_manager(flatbuffers::Offset<HeroClassManager> hero_class_manager) {
    fbb_.AddOffset(ResourceManagers::VT_HERO_CLASS_MANAGER, hero_class_manager);
  }
  explicit ResourceManagersBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ResourceManagersBuilder &operator=(const ResourceManagersBuilder &);
  flatbuffers::Offset<ResourceManagers> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ResourceManagers>(end);
    return o;
  }
};

inline flatbuffers::Offset<ResourceManagers> CreateResourceManagers(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<TerrainManager> terrain_manager = 0,
    flatbuffers::Offset<HeroClassManager> hero_class_manager = 0) {
  ResourceManagersBuilder builder_(_fbb);
  builder_.add_hero_class_manager(hero_class_manager);
  builder_.add_terrain_manager(terrain_manager);
  return builder_.Finish();
}

struct TerrainManager FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RECORDS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<TerrainRecord>> *records() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TerrainRecord>> *>(VT_RECORDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(records()) &&
           verifier.VerifyVectorOfTables(records()) &&
           verifier.EndTable();
  }
};

struct TerrainManagerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_records(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TerrainRecord>>> records) {
    fbb_.AddOffset(TerrainManager::VT_RECORDS, records);
  }
  explicit TerrainManagerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TerrainManagerBuilder &operator=(const TerrainManagerBuilder &);
  flatbuffers::Offset<TerrainManager> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TerrainManager>(end);
    return o;
  }
};

inline flatbuffers::Offset<TerrainManager> CreateTerrainManager(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TerrainRecord>>> records = 0) {
  TerrainManagerBuilder builder_(_fbb);
  builder_.add_records(records);
  return builder_.Finish();
}

inline flatbuffers::Offset<TerrainManager> CreateTerrainManagerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<TerrainRecord>> *records = nullptr) {
  return mengde::save::CreateTerrainManager(
      _fbb,
      records ? _fbb.CreateVector<flatbuffers::Offset<TerrainRecord>>(*records) : 0);
}

struct HeroClassManager FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_RECORDS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<HeroClass>> *records() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<HeroClass>> *>(VT_RECORDS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RECORDS) &&
           verifier.VerifyVector(records()) &&
           verifier.VerifyVectorOfTables(records()) &&
           verifier.EndTable();
  }
};

struct HeroClassManagerBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_records(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HeroClass>>> records) {
    fbb_.AddOffset(HeroClassManager::VT_RECORDS, records);
  }
  explicit HeroClassManagerBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroClassManagerBuilder &operator=(const HeroClassManagerBuilder &);
  flatbuffers::Offset<HeroClassManager> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeroClassManager>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroClassManager> CreateHeroClassManager(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<HeroClass>>> records = 0) {
  HeroClassManagerBuilder builder_(_fbb);
  builder_.add_records(records);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeroClassManager> CreateHeroClassManagerDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<HeroClass>> *records = nullptr) {
  return mengde::save::CreateHeroClassManager(
      _fbb,
      records ? _fbb.CreateVector<flatbuffers::Offset<HeroClass>>(*records) : 0);
}

struct TerrainRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_TERRAIN = 6
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const Terrain *terrain() const {
    return GetPointer<const Terrain *>(VT_TERRAIN);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_TERRAIN) &&
           verifier.VerifyTable(terrain()) &&
           verifier.EndTable();
  }
};

struct TerrainRecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(TerrainRecord::VT_ID, id);
  }
  void add_terrain(flatbuffers::Offset<Terrain> terrain) {
    fbb_.AddOffset(TerrainRecord::VT_TERRAIN, terrain);
  }
  explicit TerrainRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TerrainRecordBuilder &operator=(const TerrainRecordBuilder &);
  flatbuffers::Offset<TerrainRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TerrainRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<TerrainRecord> CreateTerrainRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<Terrain> terrain = 0) {
  TerrainRecordBuilder builder_(_fbb);
  builder_.add_terrain(terrain);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<TerrainRecord> CreateTerrainRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    flatbuffers::Offset<Terrain> terrain = 0) {
  return mengde::save::CreateTerrainRecord(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      terrain);
}

struct Terrain FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_MOVE_COSTS = 6,
    VT_CLASS_EFFECTS = 8
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::Vector<int32_t> *move_costs() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_MOVE_COSTS);
  }
  const flatbuffers::Vector<int32_t> *class_effects() const {
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_CLASS_EFFECTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_MOVE_COSTS) &&
           verifier.VerifyVector(move_costs()) &&
           VerifyOffset(verifier, VT_CLASS_EFFECTS) &&
           verifier.VerifyVector(class_effects()) &&
           verifier.EndTable();
  }
};

struct TerrainBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Terrain::VT_ID, id);
  }
  void add_move_costs(flatbuffers::Offset<flatbuffers::Vector<int32_t>> move_costs) {
    fbb_.AddOffset(Terrain::VT_MOVE_COSTS, move_costs);
  }
  void add_class_effects(flatbuffers::Offset<flatbuffers::Vector<int32_t>> class_effects) {
    fbb_.AddOffset(Terrain::VT_CLASS_EFFECTS, class_effects);
  }
  explicit TerrainBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TerrainBuilder &operator=(const TerrainBuilder &);
  flatbuffers::Offset<Terrain> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Terrain>(end);
    return o;
  }
};

inline flatbuffers::Offset<Terrain> CreateTerrain(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> move_costs = 0,
    flatbuffers::Offset<flatbuffers::Vector<int32_t>> class_effects = 0) {
  TerrainBuilder builder_(_fbb);
  builder_.add_class_effects(class_effects);
  builder_.add_move_costs(move_costs);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<Terrain> CreateTerrainDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const std::vector<int32_t> *move_costs = nullptr,
    const std::vector<int32_t> *class_effects = nullptr) {
  return mengde::save::CreateTerrain(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      move_costs ? _fbb.CreateVector<int32_t>(*move_costs) : 0,
      class_effects ? _fbb.CreateVector<int32_t>(*class_effects) : 0);
}

struct HeroClass FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_ID = 4,
    VT_ATTR_GRADE = 6,
    VT_ATTACK_RANGE = 8,
    VT_MOVE = 10,
    VT_BI_HP = 12,
    VT_BI_MP = 14,
    VT_PROMOTION_INFO = 16
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const Attribute *attr_grade() const {
    return GetStruct<const Attribute *>(VT_ATTR_GRADE);
  }
  int32_t attack_range() const {
    return GetField<int32_t>(VT_ATTACK_RANGE, 0);
  }
  int32_t move() const {
    return GetField<int32_t>(VT_MOVE, 0);
  }
  const BaseIncr *bi_hp() const {
    return GetStruct<const BaseIncr *>(VT_BI_HP);
  }
  const BaseIncr *bi_mp() const {
    return GetStruct<const BaseIncr *>(VT_BI_MP);
  }
  const PromotionInfo *promotion_info() const {
    return GetPointer<const PromotionInfo *>(VT_PROMOTION_INFO);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyField<Attribute>(verifier, VT_ATTR_GRADE) &&
           VerifyField<int32_t>(verifier, VT_ATTACK_RANGE) &&
           VerifyField<int32_t>(verifier, VT_MOVE) &&
           VerifyField<BaseIncr>(verifier, VT_BI_HP) &&
           VerifyField<BaseIncr>(verifier, VT_BI_MP) &&
           VerifyOffset(verifier, VT_PROMOTION_INFO) &&
           verifier.VerifyTable(promotion_info()) &&
           verifier.EndTable();
  }
};

struct HeroClassBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(HeroClass::VT_ID, id);
  }
  void add_attr_grade(const Attribute *attr_grade) {
    fbb_.AddStruct(HeroClass::VT_ATTR_GRADE, attr_grade);
  }
  void add_attack_range(int32_t attack_range) {
    fbb_.AddElement<int32_t>(HeroClass::VT_ATTACK_RANGE, attack_range, 0);
  }
  void add_move(int32_t move) {
    fbb_.AddElement<int32_t>(HeroClass::VT_MOVE, move, 0);
  }
  void add_bi_hp(const BaseIncr *bi_hp) {
    fbb_.AddStruct(HeroClass::VT_BI_HP, bi_hp);
  }
  void add_bi_mp(const BaseIncr *bi_mp) {
    fbb_.AddStruct(HeroClass::VT_BI_MP, bi_mp);
  }
  void add_promotion_info(flatbuffers::Offset<PromotionInfo> promotion_info) {
    fbb_.AddOffset(HeroClass::VT_PROMOTION_INFO, promotion_info);
  }
  explicit HeroClassBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  HeroClassBuilder &operator=(const HeroClassBuilder &);
  flatbuffers::Offset<HeroClass> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<HeroClass>(end);
    return o;
  }
};

inline flatbuffers::Offset<HeroClass> CreateHeroClass(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    const Attribute *attr_grade = 0,
    int32_t attack_range = 0,
    int32_t move = 0,
    const BaseIncr *bi_hp = 0,
    const BaseIncr *bi_mp = 0,
    flatbuffers::Offset<PromotionInfo> promotion_info = 0) {
  HeroClassBuilder builder_(_fbb);
  builder_.add_promotion_info(promotion_info);
  builder_.add_bi_mp(bi_mp);
  builder_.add_bi_hp(bi_hp);
  builder_.add_move(move);
  builder_.add_attack_range(attack_range);
  builder_.add_attr_grade(attr_grade);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<HeroClass> CreateHeroClassDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const Attribute *attr_grade = 0,
    int32_t attack_range = 0,
    int32_t move = 0,
    const BaseIncr *bi_hp = 0,
    const BaseIncr *bi_mp = 0,
    flatbuffers::Offset<PromotionInfo> promotion_info = 0) {
  return mengde::save::CreateHeroClass(
      _fbb,
      id ? _fbb.CreateString(id) : 0,
      attr_grade,
      attack_range,
      move,
      bi_hp,
      bi_mp,
      promotion_info);
}

struct PromotionInfo FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_HERO_CLASS_ID = 4,
    VT_LEVEL = 6
  };
  const flatbuffers::String *hero_class_id() const {
    return GetPointer<const flatbuffers::String *>(VT_HERO_CLASS_ID);
  }
  int32_t level() const {
    return GetField<int32_t>(VT_LEVEL, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_HERO_CLASS_ID) &&
           verifier.VerifyString(hero_class_id()) &&
           VerifyField<int32_t>(verifier, VT_LEVEL) &&
           verifier.EndTable();
  }
};

struct PromotionInfoBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_hero_class_id(flatbuffers::Offset<flatbuffers::String> hero_class_id) {
    fbb_.AddOffset(PromotionInfo::VT_HERO_CLASS_ID, hero_class_id);
  }
  void add_level(int32_t level) {
    fbb_.AddElement<int32_t>(PromotionInfo::VT_LEVEL, level, 0);
  }
  explicit PromotionInfoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  PromotionInfoBuilder &operator=(const PromotionInfoBuilder &);
  flatbuffers::Offset<PromotionInfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<PromotionInfo>(end);
    return o;
  }
};

inline flatbuffers::Offset<PromotionInfo> CreatePromotionInfo(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> hero_class_id = 0,
    int32_t level = 0) {
  PromotionInfoBuilder builder_(_fbb);
  builder_.add_level(level);
  builder_.add_hero_class_id(hero_class_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<PromotionInfo> CreatePromotionInfoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *hero_class_id = nullptr,
    int32_t level = 0) {
  return mengde::save::CreatePromotionInfo(
      _fbb,
      hero_class_id ? _fbb.CreateString(hero_class_id) : 0,
      level);
}

inline const mengde::save::Scenario *GetScenario(const void *buf) {
  return flatbuffers::GetRoot<mengde::save::Scenario>(buf);
}

inline const mengde::save::Scenario *GetSizePrefixedScenario(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mengde::save::Scenario>(buf);
}

inline bool VerifyScenarioBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mengde::save::Scenario>(nullptr);
}

inline bool VerifySizePrefixedScenarioBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mengde::save::Scenario>(nullptr);
}

inline void FinishScenarioBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mengde::save::Scenario> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedScenarioBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mengde::save::Scenario> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace save
}  // namespace mengde

#endif  // FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_

// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_
#define FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_

#include "flatbuffers/flatbuffers.h"

namespace mengde {
namespace save {

struct Scenario;

struct Scenario FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TEST_VALUE = 4
  };
  int32_t test_value() const {
    return GetField<int32_t>(VT_TEST_VALUE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_TEST_VALUE) &&
           verifier.EndTable();
  }
};

struct ScenarioBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_test_value(int32_t test_value) {
    fbb_.AddElement<int32_t>(Scenario::VT_TEST_VALUE, test_value, 0);
  }
  explicit ScenarioBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ScenarioBuilder &operator=(const ScenarioBuilder &);
  flatbuffers::Offset<Scenario> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Scenario>(end);
    return o;
  }
};

inline flatbuffers::Offset<Scenario> CreateScenario(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t test_value = 0) {
  ScenarioBuilder builder_(_fbb);
  builder_.add_test_value(test_value);
  return builder_.Finish();
}

inline const mengde::save::Scenario *GetScenario(const void *buf) {
  return flatbuffers::GetRoot<mengde::save::Scenario>(buf);
}

inline const mengde::save::Scenario *GetSizePrefixedScenario(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<mengde::save::Scenario>(buf);
}

inline bool VerifyScenarioBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<mengde::save::Scenario>(nullptr);
}

inline bool VerifySizePrefixedScenarioBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<mengde::save::Scenario>(nullptr);
}

inline void FinishScenarioBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mengde::save::Scenario> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedScenarioBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<mengde::save::Scenario> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace save
}  // namespace mengde

#endif  // FLATBUFFERS_GENERATED_SCENARIO_MENGDE_SAVE_H_

namespace mengde.save;

table Scenario {
  id: string;
  stage_id_list: [string];
  stage_no: uint;
  resource_managers: ResourceManagers;
}

table ResourceManagers {
  terrain_manager: TerrainManager;
  hero_class_manager: HeroClassManager;
//  magic_manager: MagicManager;
  equipment_manager: EquipmentManager;
  hero_tpl_manager: HeroTemplateManager;
}

table TerrainManager {
  records: [TerrainRecord];
}

table HeroClassManager {
  records: [HeroClass];
}

table HeroTemplateManager {
  records: [HeroTemplate];
}

table TerrainRecord {
  id: string;
  terrain: Terrain;
}

table Terrain {
  id: string;
//  index: int;
  move_costs: [int];
  class_effects: [int];
}

table HeroTemplate {
  id: string;
  hero_class: string;
  attr: Attribute;
}

table HeroClass {
  id: string;
//  index: int;
  attr_grade: Attribute;
  attack_range: int;
  move: int;
  bi_hp: BaseIncr;
  bi_mp: BaseIncr;
  promotion_info: PromotionInfo;
}

struct BaseIncr {
  base: int;
  incr: int;
}

table PromotionInfo {
  hero_class_id: string;
  level: int;
}

struct Attribute {
  atk: int;
  def: int;
  dex: int;
  itl: int;
  mor: int;
}

struct Position {
  x: int;
  y: int;
}

table EquipmentManager {
  records: [Equipment];
}

table Equipment {
  id: string;
  type: int; // Actually enum
  volatile_attributes: VolatileAttributes;
}

table VolatileAttributes {
  attribute_modifier_list: AttributeModifierList;
//  event_effect_list: EventEffectList;
}

table AttributeModifierList {
  entries: [AttributeModifier];
}

table AttributeModifier {
  id: string;
  stat_idx: short;
  turn: TurnBased;
  mod: StatMod;
}

struct TurnBased {
  turns: ushort;
}

struct StatMod {
  addend: short;
  multiplier: short;
}

root_type Scenario;

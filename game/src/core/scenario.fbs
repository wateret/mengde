namespace mengde.save;

table Scenario {
  id: string;
  stage_id_list: [string];
  stage_no: uint;
  resource_managers: ResourceManagers;
  assets: Assets;
}

table ResourceManagers {
  terrain_manager: TerrainManager;
  hero_class_manager: HeroClassManager;
  magic_manager: [Magic];
  equipment_manager: EquipmentManager;
  hero_tpl_manager: HeroTemplateManager;
}

table TerrainManager {
  records: [TerrainRecord];
}

table HeroClassManager {
  records: [HeroClass];
}

table HeroTemplateManager {
  records: [HeroTemplate];
}

table TerrainRecord {
  id: string;
  terrain: Terrain;
}

table Terrain {
  id: string;
//  index: int;
  move_costs: [int];
  class_effects: [int];
}

table HeroTemplate {
  id: string;
  hero_class: string;
  attr: Attribute;
}

table HeroClass {
  id: string;
//  index: int;
  attr_grade: Attribute;
  attack_range: int;
  move: int;
  bi_hp: BaseIncr;
  bi_mp: BaseIncr;
  promotion_info: PromotionInfo;
}

struct BaseIncr {
  base: int;
  incr: int;
}

table PromotionInfo {
  hero_class_id: string;
  level: int;
}

struct Attribute {
  atk: int;
  def: int;
  dex: int;
  itl: int;
  mor: int;
}

struct Position {
  x: int;
  y: int;
}

table EquipmentManager {
  records: [Equipment];
}

table Equipment {
  id: string;
  type: int; // Actually enum
  volatile_attributes: VolatileAttributes;
}

table VolatileAttributes {
  attribute_modifier_list: [AttributeModifier];
  event_effect_list: [EventEffect];
}

table AttributeModifier {
  id: string;
  stat_idx: short;
  turn: TurnBased;
  mod: StatMod;
}

struct TurnBased {
  turns: ushort;
}

struct StatMod {
  addend: short;
  multiplier: short;
}

union EventEffectImpl {
  GeneralEventEffect,
  OnCmdEventEffect
}

union GeneralEventEffectImpl {
  GEERestoreHp
}

union OnCmdEventEffectImpl {
  OCEEPreemptiveAttack,
  OCEEEnhanceBasicAttack
}

table EventEffect {
  turn: TurnBased;
  instance: EventEffectImpl;
}

table GeneralEventEffect {
  type: int; // GeneralEventType;
  instance: GeneralEventEffectImpl;
}

table GEERestoreHp {
  mod: StatMod;
}

table OnCmdEventEffect {
  type: int; // OnCmdEventType;
  instance: OnCmdEventEffectImpl;
}

table OCEEPreemptiveAttack {
}

table OCEEEnhanceBasicAttack {
  mod: StatMod;
}

table Magic {
  id: string;
  range: int;
  learn_info_list: [LearnInfo];
  target_enemy: bool;
  mp_cost: uint16;
  effects: [MagicEffect];
}

struct LearnInfo {
  id: uint16; // XXX maybe this should be string?
  lv: uint16;
}

union MagicEffectImpl {
  MagicEffectHp,
  MagicEffectAttribute,
  MagicEffectCondition
}

table MagicEffect {
  type: int; // enum MagicEffectType
  instance: MagicEffectImpl;
}

table MagicEffectHp {
  power: int;
}

table MagicEffectAttribute {
  attribute_modifier: AttributeModifier;
}

table MagicEffectCondition {
  condition: int; // enum Condition
  turn: TurnBased;
}

table Assets {
  money: uint32;
  heroes: [Hero];
  equipments: [EquipmentWithAmount];
}

table EquipmentWithAmount {
  equipment: string;
  amount: uint32;
}

table Hero {
  id: string;
  hero_class: string;
  hero_attr: Attribute;
  equipment_set: EquipmentSet;
  level: LevelExp;
  hp: uint32;
  mp: uint32;
}

struct LevelExp {
  level: uint16;
  exp: uint16;
}

table EquipmentSet {
  weapon: string;
  armor: string;
  aid: string;
}

root_type Scenario;
